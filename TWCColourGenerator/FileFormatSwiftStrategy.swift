import Foundation

class FileFormatSwiftStrategy: NSObject, FileFormatStrategy {
  
  func implementationFormat(colours: Array<String>,
                            fileName: String) -> String {
    let implementation = "//  This file is automatically generated by TWCColourGenerator.\n\nimport UIKit\n\n"
    let mutableImplementation = NSMutableString(string: implementation)
    let colours = colours.joined(separator: "")
    let body = "extension UIColor {\n\n\(colours)}"
    mutableImplementation.append(body)
    return mutableImplementation as String
  }
  
  func implementationFilePath(fileName: String,
                              outputPath: String) -> String {
    let filePath = "\(outputPath)/UIColor+\(fileName).swift"
    return NSString(string: filePath).expandingTildeInPath
  }
  
  func functionBody(red: CGFloat,
                    green: CGFloat,
                    blue: CGFloat,
                    alpha: CGFloat) -> String {
    let red = String(format: "%.3f", red)
    let green = String(format: "%.3f", green)
    let blue = String(format: "%.3f", blue);
    let alpha = String(format: "%.3f", alpha);
    return "{\n    return UIColor(red: \(red), green: \(green), blue: \(blue), alpha: \(alpha))\n  }\n\n"
  }
  
  func functionName(prefix: String,
                    colourName: String) -> String {
    let adjustedPrefix = prefix.characters.count > 0 ? prefix.appending("_") : ""
    let camelCaseColourName = NSString.camelCaseName(colourName: colourName)
    return "  class func \(adjustedPrefix)\(camelCaseColourName)Colour() -> UIColor "
  }
  
  func interfaceFormat(colours: Array<String>,
                       fileName: String) -> String {
    return ""
  }
  
  func interfaceFilePath(fileName: String,
                         outputPath: String) -> String {
    return ""
  }
  
}
