import Foundation

class FileFormatObjectiveCStrategy: NSObject,
                                    FileFormatStrategy {
  
  func implementationFormat(colours: Array<String>,
                            fileName: String) -> String {
    let implementation = "#import \"UIColor+OTB.h\"\n\n"
    let mutableImplementation = NSMutableString(string: implementation)
    let colours = colours.joined(separator: "")
    let body = "@implementation UIColor (\(fileName))\n\n\(colours)@end"
    return mutableImplementation.appending(body)
  }
  
  func implementationFilePath(fileName: String,
                              outputPath: String) -> String {
    let filePath = "\(outputPath)/UIColor+\(fileName).m"
    return NSString(string: filePath).expandingTildeInPath
  }
  
  func functionBody(red: CGFloat,
                    green: CGFloat,
                    blue: CGFloat,
                    alpha: CGFloat) -> String {
    let red = String(format: "%.3f", red)
    let green = String(format: "%.3f", green)
    let blue = String(format: "%.3f", blue);
    let alpha = String(format: "%.3f", alpha);
    return "{\n  return [UIColor colorWithRed:\(red) green:\(green) blue:\(blue) alpha:\(alpha)];\n}\n\n"
  }
  
  func functionName(prefix: String,
                    colourName: String) -> String {
    let adjustedPrefix = prefix.characters.count > 0 ? prefix.appending("_") : ""
    let camelCaseColourName = NSString.camelCaseName(colourName: colourName)
    return "+ (UIColor *)\(adjustedPrefix)\(camelCaseColourName)Colour;\n"
  }
  
  func interfaceFormat(colours: Array<String>,
                       fileName: String) -> String {
    let interface = "//  This file is automatically generated by TWCColourGenerator.\n\n@import UIKit;\n\n"
    let mutableInterface = NSMutableString(string: interface)
    let colours = colours.joined(separator: "")
    let body = "@interface UIColor (\(fileName))\n\n\(colours)\n@end"
    return mutableInterface.appending(body)
  }
  
  func interfaceFilePath(fileName: String,
                         outputPath: String) -> String {
    let filePath = "\(outputPath)/UIColor+\(fileName).h"
    return NSString(string: filePath).expandingTildeInPath
  }
  
}
